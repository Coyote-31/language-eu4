name: 'EU4 .mod'
scopeName: 'source.eu4-mod'

# File's extensions managed
fileTypes: [
  'mod'
]

# Tell the tokenizer not to "give up" on long lines
limitLineLength: false

# Checks for foldable area
foldingStartMarker: '{'
foldingStopMarker: '}'

# Manage active rules from repository
patterns: [
  { include: '#entry_mono' }
  { include: '#entry_multi' }
]

# All rules :
repository:

  # name: 'invalid.illegal.eu4-mod'
  debug: {
    name: 'invalid.illegal.eu4-mod'
    comment: 'For debugging selectors (dev)'
    match: '.*'
  }

  ## Monoline entry :

  entry_mono: {
    name: 'meta.entry-mono.eu4-mod'
    comment: 'Select until first space'

    match: '^\\b((?![\\}\\{]).)*$'
    captures:
      0: patterns: [{ include: '#entry_mono_variable' }]
  }

  entry_mono_variable: {
    name: 'meta.entry-mono-variable.eu4-mod'
    comment: 'Test and split variable from assignement'

    match: '^([^=\\s]+)(.*)'
    captures:
      1: patterns: [{ include: '#variable_mono' }]
      2: patterns: [{ include: '#entry_mono_assignment' }]
  }

  entry_mono_assignment: {
    name: 'meta.entry-mono-assignment.eu4-mod'
    comment: 'Check no spacing before equal sign'

    match: '^(=)(.*)'
    captures:
      1: patterns: [{ include: '#assignment' }]
      2: patterns: [{ include: '#entry_mono_string' }]
  }

  entry_mono_string: {
    name: 'meta.entry-mono-string.eu4-mod'
    comment: 'Check no spacing before string'

    match: '^("[^"]*")'
    captures:
      1: patterns: [{ include: '#string' }]
  }

  ## Multiline entry :

  entry_multi: {
    name: 'meta.entry-multi.eu4-mod'
    comment: 'All the multiline entry'

    begin: '^(\\w*)(=)({)'
    beginCaptures:
      1: patterns: [{ include: '#variable_multi' }]
      2: patterns: [{ include: '#assignment' }]
      3: name: 'punctuation.definition.arguments.begin.eu4-mod'

    end: '(})'
    endCaptures:
      1: name: 'punctuation.definition.arguments.end.eu4-mod'

    patterns: [{ include: '#entry_multi_string' }]
  }

  entry_multi_string: {
    name: 'meta.entry-multi-string.eu4-mod'
    comment: ''

    match: '^(\\s{2}|\\t)[\\s\\t]*("[^"]*")$'
    captures:
      2: patterns: [{ include: '#string' }]
  }

  ## Finest selection :

  variable_mono: {
    name: 'support.variable.eu4-mod'
    comment: 'Names allowed for monoline variable'
    match: '^(version|name|supported_version|path|archive|remote_file_id)$'
  }

  variable_multi: {
    name: 'support.variable.eu4-mod'
    comment: 'Names allowed for multiline variable'
    match: '^(tags)$'
  }

  assignment: {
    name: 'keyword.operator.assignment.eu4-mod'
    comment: 'The operator assignment of the variable'
    match: '^='
  }

  string: {
    name: 'string.quoted.double.eu4-mod'
    comment: 'String with double-quote'
    match: '^"[^"]*"'
  }
